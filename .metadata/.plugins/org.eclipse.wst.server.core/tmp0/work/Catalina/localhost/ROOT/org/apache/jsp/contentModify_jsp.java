/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-01-11 15:37:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class contentModify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("	<title>한양사이버대 강의평가</title>\r\n");
      out.write("	<!-- 부트스트랩 CSS 추가하기 -->\r\n");
      out.write("	<link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\" rel=\"stylesheet\"> \r\n");
      out.write("	<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css\" rel=\"stylesheet\"> \r\n");
      out.write("	\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script> \r\n");
      out.write("	<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js\"></script>\r\n");
      out.write("	<script src=\" https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.18/lang/summernote-ko-KR.min.js\"></script>\r\n");
      out.write("	\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script>\r\n");
      out.write("	window.onload = function() { \r\n");
      out.write("		if(document.location.protocol == 'http:'){\r\n");
      out.write("		document.location.href = document.location.href.replace('http:', 'https:');\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("	<br>\r\n");
      out.write("	<br>\r\n");
      out.write("	<br>\r\n");
      out.write("	<br>\r\n");
      out.write("	<br>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		수정하기\r\n");
      out.write("		<div>\r\n");
      out.write("			<form method=\"post\" action=\"freeBoardUpdate\">\r\n");
      out.write("				<table class=\"table\">\r\n");
      out.write("					<thead>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<th colspan=\"2\" style=\"background-color: #eeeeee; text-align: center;\">게시글은 익명으로 처리 됩니다!</th>\r\n");
      out.write("						</tr>\r\n");
      out.write("					</thead>\r\n");
      out.write("					<tbody>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>\r\n");
      out.write("								<label>아이디는 변경 할 수 없습니다.</label>\r\n");
      out.write("							</td>\r\n");
      out.write("							<td>\r\n");
      out.write("								<input type=\"password\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.password}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"form-control\" placeholder=\"비밀번호\" name=\"password\" maxlength=\"10\">			\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td colspan=\"2\">\r\n");
      out.write("								<input type=\"text\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.bbsTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"form-control\" placeholder=\"글 제목\" name=\"title\" maxlength=\"50\">\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td colspan=\"2\">\r\n");
      out.write("								<input type=\"hidden\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.bbsID}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"form-control\" placeholder=\"닉네임\" name=\"bbsID\" maxlength=\"10\">\r\n");
      out.write("								<input type=\"hidden\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.nickName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"form-control\" placeholder=\"닉네임\" name=\"nickName\" maxlength=\"10\">\r\n");
      out.write("								<textarea id=\"summernote\" name=\"content\" class=\"summernote\" maxlength=\"2048\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.bbsContente}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</textarea>\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td colspan=\"2\">\r\n");
      out.write("								<input type=\"hidden\" id=\"userID\" name=\"userID\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userID}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("								<input type=\"submit\" value=\"등록\">\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>						\r\n");
      out.write("					</tbody>					\r\n");
      out.write("				</table>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<footer class=\"bg-dark mt-4 p-5 text-center\" style=\"color: #FFFFFF;\">\r\n");
      out.write("		Copyright &copy; 2021이기주All Rights Reserved.\r\n");
      out.write("	</footer>\r\n");
      out.write("   	<script>\r\n");
      out.write("	    $(document).ready(function() {\r\n");
      out.write("	    	//여기 아래 부분\r\n");
      out.write("	    	$('#summernote').summernote({\r\n");
      out.write("	    		  height: 300,                 // 에디터 높이 \r\n");
      out.write("	    		  minHeight: null,             // 최소 높이\r\n");
      out.write("	    		  maxHeight: null,             // 최대 높이\r\n");
      out.write("	    		  focus: true,                  // 에디터 로딩후 포커스를 맞출지 여부\r\n");
      out.write("	    		  lang: \"ko-KR\",					// 한글 설정\r\n");
      out.write("	    		  placeholder: '최대 2048자까지 쓸 수 있습니다',	//placeholder 설정\r\n");
      out.write("	    		  toolbar: [\r\n");
      out.write("	  			    // [groupName, [list of button]]\r\n");
      out.write("	  			    ['fontname', ['fontname']],\r\n");
      out.write("	  			    ['fontsize', ['fontsize']],\r\n");
      out.write("	  			    ['style', ['bold', 'italic', 'underline','strikethrough', 'clear']],\r\n");
      out.write("	  			    ['color', ['forecolor','color']],\r\n");
      out.write("	  			    ['table', ['table']],\r\n");
      out.write("	  			    ['para', ['ul', 'ol', 'paragraph']],\r\n");
      out.write("	  			    ['height', ['height']],\r\n");
      out.write("	  			    ['insert',['picture','link','video']],\r\n");
      out.write("	  			    ['view', ['fullscreen', 'help']]\r\n");
      out.write("	  			  ],\r\n");
      out.write("	  			 fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New','맑은 고딕','궁서','굴림체','굴림','돋움체','바탕체'],\r\n");
      out.write("	  			 fontSizes: ['8','9','10','11','12','14','16','18','20','22','24','28','30','36','50','72'],\r\n");
      out.write("	  			 callbacks: {	//여기 부분이 이미지를 첨부하는 부분\r\n");
      out.write("					onImageUpload : function(files) {\r\n");
      out.write("						for (var i = 0; i < files.length; i++) {\r\n");
      out.write("							uploadSummernoteImageFile(files[i]);\r\n");
      out.write("						}\r\n");
      out.write("					},\r\n");
      out.write("					onPaste: function (e) {\r\n");
      out.write("						var clipboardData = e.originalEvent.clipboardData;\r\n");
      out.write("						if (clipboardData && clipboardData.items && clipboardData.items.length) {\r\n");
      out.write("							var item = clipboardData.items[0];\r\n");
      out.write("							if (item.kind === 'file' && item.type.indexOf('image/') !== -1) {\r\n");
      out.write("								e.preventDefault();\r\n");
      out.write("							}\r\n");
      out.write("						}\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("	    	});\r\n");
      out.write("	    });\r\n");
      out.write("	    \r\n");
      out.write("		function uploadSummernoteImageFile(file) {\r\n");
      out.write("			var userID = document.getElementById(\"userID\").value;	\r\n");
      out.write("			console.log(userID);\r\n");
      out.write("			data = new FormData();\r\n");
      out.write("			data.append(\"file\", file);\r\n");
      out.write("			data.append(\"userID\", userID);\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				data : data,\r\n");
      out.write("				type : \"post\",\r\n");
      out.write("				url : \"uploadSummernoteImageFile\",\r\n");
      out.write("				cache: false,\r\n");
      out.write("		        contentType: false, // contentType 보내는 데이터의 유형 (false 설정시 기본유형으로됨)\r\n");
      out.write("		        processData: false,\r\n");
      out.write("		        //dataType: \"json\", // 서버에서 보내주는 데이터를 받는 유형 (서버에서 설정한 유형과 같아야한다)\r\n");
      out.write("		        //enctype: \"multipart/form-data\",\r\n");
      out.write("		        // success함수는 기본적으로 3개의 인자를 받지만 응답코드 하나만 인자로 사용해도 무방\r\n");
      out.write("				success : function(response) {\r\n");
      out.write("					if (response[0].resultCode == 'capacityFull') {\r\n");
      out.write("						console.log(response[1].msg);\r\n");
      out.write("						alert(response[1].msg)\r\n");
      out.write("					} else {\r\n");
      out.write("						$('#summernote').summernote('insertImage', response);\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error : function(error) {\r\n");
      out.write("			        alert('시스템 오류');\r\n");
      out.write("			    }\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
