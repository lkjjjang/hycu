/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-01-02 05:15:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class delForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>댓글삭제</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	비밀번호\r\n");
      out.write("	<input type=\"password\" id=\"delPassword\">\r\n");
      out.write("	<input type=\"button\" value=\"삭제\" onclick=\"commentRemove()\">\r\n");
      out.write("\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.6.0.js\"\r\n");
      out.write("  			integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\"\r\n");
      out.write("  			crossorigin=\"anonymous\">\r\n");
      out.write("	</script>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		function commentRemove(){\r\n");
      out.write("			// 전달되는 파라미터값 형태\r\n");
      out.write("			// delID_ comment or reply or bbsContent or contentModify _ id\r\n");
      out.write("			var param = getParam('id').split('_');\r\n");
      out.write("			var divide = param[1];\r\n");
      out.write("			var id = param[2];\r\n");
      out.write("			var password = $('#delPassword').val();\r\n");
      out.write("			if (divide == 'contentModify') {\r\n");
      out.write("				passCheck(id, password);\r\n");
      out.write("			} else {\r\n");
      out.write("				removeAction(divide, id, password);\r\n");
      out.write("			}\r\n");
      out.write("	    }\r\n");
      out.write("		\r\n");
      out.write("		function passCheck(bbsId, password) {\r\n");
      out.write("			var data = {id: bbsId, password: password}\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: \"post\",\r\n");
      out.write("				url: 'contentModify',\r\n");
      out.write("				data: JSON.stringify(data),\r\n");
      out.write("				contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("				dataType: \"json\",				\r\n");
      out.write("				success: function(json) {\r\n");
      out.write("					var result = json[0].resultCode;\r\n");
      out.write("					if (result == 'ok') {\r\n");
      out.write("						opener.goModify(bbsId);\r\n");
      out.write("					} else {\r\n");
      out.write("						opener.modifyMsg('비밀번호가 틀렸습니다.');\r\n");
      out.write("					}\r\n");
      out.write("					window.close();\r\n");
      out.write("				},\r\n");
      out.write("				error: function(json) {\r\n");
      out.write("					console.log(json[0]);\r\n");
      out.write("					opener.delMsg(\"시스템 오류 입니다.\");\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function removeAction(divide, id, password) {\r\n");
      out.write("			var data = {\r\n");
      out.write("					divide: divide,\r\n");
      out.write("					id: id, \r\n");
      out.write("					password: password						\r\n");
      out.write("			}	\r\n");
      out.write("			\r\n");
      out.write("			var url = getUrl(divide);\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: \"post\",\r\n");
      out.write("				url: url,\r\n");
      out.write("				data: JSON.stringify(data),\r\n");
      out.write("				contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("				dataType: \"json\",				\r\n");
      out.write("				success: function(json) {\r\n");
      out.write("					var resultCode = json[0].resultCode;\r\n");
      out.write("										\r\n");
      out.write("					if (divide == 'bbsContent') {\r\n");
      out.write("						if (resultCode == 'OK') {\r\n");
      out.write("							opener.bbsDelMsg(\"삭제 되었습니다.\", \"OK\");\r\n");
      out.write("						} else if (resultCode == 'WRONG_PASS') {\r\n");
      out.write("							opener.bbsDelMsg(\"잘못된 비밀번호 입니다.\");\r\n");
      out.write("						} else if (resultCode == 'ERROR') {\r\n");
      out.write("							opener.bbsDelMsg(\"데이터베이스 오류 입니다.\", \"OK\");					\r\n");
      out.write("						}\r\n");
      out.write("						window.close();\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("					var commentCount = json[1].commentCount;\r\n");
      out.write("					if (resultCode == 'OK') {\r\n");
      out.write("						opener.delMsg(\"삭제 되었습니다.\", resultCode, commentCount);\r\n");
      out.write("					} else if (resultCode == 'WRONG_PASS') {\r\n");
      out.write("						opener.delMsg(\"잘못된 비밀번호 입니다.\", resultCode, commentCount);\r\n");
      out.write("					} else if (resultCode == 'ERROR') {\r\n");
      out.write("						opener.delMsg(\"데이터베이스 오류 입니다.\", resultCode, commentCount);					\r\n");
      out.write("					}\r\n");
      out.write("					window.close();\r\n");
      out.write("				},\r\n");
      out.write("				error: function(json) {\r\n");
      out.write("					console.log(json[0]);\r\n");
      out.write("					opener.delMsg(\"시스템 오류 입니다.\");\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function getUrl(divide) {\r\n");
      out.write("			let url;\r\n");
      out.write("			if (divide == 'bbsContent') {\r\n");
      out.write("				url = 'freeBoardDeleteController';\r\n");
      out.write("			} else if (divide == 'comment') {\r\n");
      out.write("				url = 'commentDeleteController';\r\n");
      out.write("			} else if (divide == 'reply'){\r\n");
      out.write("				url = 'replyDeleteController';\r\n");
      out.write("			}\r\n");
      out.write("			return url;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 파라미터 id값으로 분류 사용처에서 getParam(원하는 id);\r\n");
      out.write("		function getParam(sname) {\r\n");
      out.write("		    var params = location.search.substr(location.search.indexOf(\"?\") + 1);\r\n");
      out.write("		    var sval = \"\";\r\n");
      out.write("		    params = params.split(\"&\");\r\n");
      out.write("		    for (var i = 0; i < params.length; i++) {\r\n");
      out.write("		        temp = params[i].split(\"=\");\r\n");
      out.write("		        if ([temp[0]] == sname) { sval = temp[1]; }\r\n");
      out.write("		    }\r\n");
      out.write("		    return sval;\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
